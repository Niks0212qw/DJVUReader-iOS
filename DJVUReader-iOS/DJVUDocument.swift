import Foundation
import UIKit
import PDFKit
import SwiftUI

enum ViewMode: String, CaseIterable {
    case singlePage = "single"
    case continuous = "continuous"
}

class DJVUDocument: ObservableObject {
    @Published var currentPage: Int = 0
    @Published var totalPages: Int = 0
    @Published var currentImage: UIImage?
    @Published var isLoaded: Bool = false
    @Published var errorMessage: String = ""
    @Published var isLoading: Bool = false
    @Published var allPages: [UIImage] = []
    @Published var continuousImages: [Int: UIImage] = [:]
    @Published var isContinuousLoading: Bool = false
    @Published var continuousLoadingProgress: Float = 0.0
    @Published var viewMode: ViewMode = .singlePage
    
    @Published var continuousLoadingQueue = Set<Int>()
    private let batchSize = 3
    
    private var documentURL: URL?
    private var imageCache: [Int: UIImage] = [:]
    private var djvuContext: OpaquePointer?
    private var pdfDocument: PDFDocument?
    private var isPDF: Bool = false
    
    private let backgroundQueue = DispatchQueue(label: "djvu.background", qos: .userInitiated)
    private let progressiveQueue = DispatchQueue(label: "djvu.progressive", qos: .userInitiated)
    private var tempFileURL: URL?
    private var progressiveLoadingTask: DispatchWorkItem?
    
    private func copyToTempDirectory(from sourceURL: URL) -> URL? {
        let tempDir = FileManager.default.temporaryDirectory
        let fileName = sourceURL.lastPathComponent
        let fileExtension = sourceURL.pathExtension
        
        // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        let safeFileName = "djvu_\(UUID().uuidString).\(fileExtension)"
        let tempURL = tempDir.appendingPathComponent(safeFileName)
        
        do {
            if FileManager.default.fileExists(atPath: tempURL.path) {
                try FileManager.default.removeItem(at: tempURL)
            }
            try FileManager.default.copyItem(at: sourceURL, to: tempURL)
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            self.tempFileURL = tempURL
            
            NSLog("üìã –§–∞–π–ª '%@' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %@", fileName, tempURL.path)
            NSLog("üìã –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: %@", safeFileName)
            return tempURL
        } catch {
            NSLog("‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ '%@': %@", fileName, error.localizedDescription)
            return nil
        }
    }
    
    func loadDocument(from url: URL) {
        documentURL = url
        errorMessage = ""
        
        DispatchQueue.main.async {
            self.isLoading = true
            self.isLoaded = false
            self.currentImage = nil
        }
        
        backgroundQueue.async {
            self.loadDJVUDocument(from: url)
        }
    }
    
    private func loadDJVUDocument(from url: URL) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª—É –Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        guard url.startAccessingSecurityScopedResource() else {
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É"
                self.isLoading = false
            }
            return
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DjVu –∫–æ–Ω—Ç–µ–∫—Å—Ç
        djvuContext = djvu_context_init()
        
        guard let context = djvuContext else {
            url.stopAccessingSecurityScopedResource()
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å DjVu –±–∏–±–ª–∏–æ—Ç–µ–∫—É"
                self.isLoading = false
            }
            return
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        let tempURL = copyToTempDirectory(from: url)
        let path = tempURL?.path ?? url.path
        
        NSLog("üìÅ Loading DJVU from path: %@", path)
        NSLog("üìÅ Original file name: %@", url.lastPathComponent)
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ–¥–∏—Ä—É–µ—Ç—Å—è –≤ UTF-8
        guard let utf8Path = path.cString(using: .utf8) else {
            DispatchQueue.main.async {
                self.errorMessage = "–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"
                self.isLoading = false
            }
            return
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        let result = djvu_load_document_from_file(context, utf8Path)
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
        url.stopAccessingSecurityScopedResource()
        
        if result != 0 {
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å DJVU —Ñ–∞–π–ª. –ö–æ–¥ –æ—à–∏–±–∫–∏: \(result)"
                self.isLoading = false
            }
            return
        }
        
        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: \(path)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ PDF –∏–ª–∏ DJVU
        self.isPDF = djvu_is_pdf_document(context) == 1
        
        if self.isPDF {
            // –î–ª—è PDF –∏—Å–ø–æ–ª—å–∑—É–µ–º PDFKit
            self.pdfDocument = PDFDocument(url: url)
            let pageCount = self.pdfDocument?.pageCount ?? 1
            
            DispatchQueue.main.async {
                self.totalPages = pageCount
                self.isLoaded = true
                print("üìñ PDF –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤: \(pageCount) —Å—Ç—Ä–∞–Ω–∏—Ü")
                self.loadPage(0)
            }
        } else {
            // –î–ª—è DJVU –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ø–∞—Ä—Å–µ—Ä
            let pageCount = djvu_get_document_page_count(context)
            
            DispatchQueue.main.async {
                self.totalPages = Int(pageCount)
                self.isLoaded = true
                print("üìñ DJVU –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤: \(pageCount) —Å—Ç—Ä–∞–Ω–∏—Ü")
                self.loadPage(0)
            }
        }
    }
    
    func loadPage(_ pageIndex: Int) {
        guard pageIndex >= 0 && pageIndex < totalPages else { return }
        
        if let cachedImage = imageCache[pageIndex] {
            DispatchQueue.main.async {
                self.currentImage = cachedImage
                self.currentPage = pageIndex
                self.isLoading = false
            }
            return
        }
        
        DispatchQueue.main.async {
            self.isLoading = true
            self.currentPage = pageIndex
        }
        
        backgroundQueue.async {
            self.loadPageImage(pageIndex: pageIndex)
        }
    }
    
    private func loadPageImage(pageIndex: Int) {
        if isPDF {
            loadPDFPageImage(pageIndex: pageIndex)
        } else {
            loadDJVUPageImage(pageIndex: pageIndex)
        }
    }
    
    private func loadPDFPageImage(pageIndex: Int) {
        guard let pdfDocument = pdfDocument,
              let page = pdfDocument.page(at: pageIndex) else {
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å PDF —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                self.isLoading = false
            }
            return
        }
        
        let pageRect = page.bounds(for: .mediaBox)
        let scale: CGFloat = 2.0 // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        let scaledSize = CGSize(width: pageRect.width * scale, height: pageRect.height * scale)
        
        let renderer = UIGraphicsImageRenderer(size: scaledSize)
        let image = renderer.image { context in
            UIColor.white.set()
            context.fill(CGRect(origin: .zero, size: scaledSize))
            
            context.cgContext.scaleBy(x: scale, y: scale)
            page.draw(with: .mediaBox, to: context.cgContext)
        }
        
        imageCache[pageIndex] = image
        
        DispatchQueue.main.async {
            if self.currentPage == pageIndex {
                self.currentImage = image
                self.isLoading = false
                self.errorMessage = ""
                print("‚úÖ PDF —Å—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            }
        }
    }
    
    private func loadDJVUPageImage(pageIndex: Int) {
        guard let context = djvuContext else { return }
        
        var width: Int32 = 0
        var height: Int32 = 0
        
        let sizeResult = djvu_get_page_dimensions(context, Int32(pageIndex), &width, &height)
        if sizeResult != 0 {
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                self.isLoading = false
            }
            return
        }
        
        let scale: Float = 2.0 // –ú–∞—Å—à—Ç–∞–± –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
        let scaledWidth = Int32(Float(width) * scale)
        let scaledHeight = Int32(Float(height) * scale)
        
        let bytesPerPixel = 4
        let dataSize = Int(scaledWidth * scaledHeight * Int32(bytesPerPixel))
        let pixelData = UnsafeMutablePointer<UInt8>.allocate(capacity: dataSize)
        
        defer {
            pixelData.deallocate()
        }
        
        let renderResult = djvu_render_page_to_buffer(
            context,
            Int32(pageIndex),
            scaledWidth,
            scaledHeight,
            pixelData
        )
        
        if renderResult == -2 {
            // PDF file - should be handled by PDFKit, this shouldn't happen
            DispatchQueue.main.async {
                self.errorMessage = "PDF —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è PDFKit"
                self.isLoading = false
            }
            return
        } else if renderResult != 0 {
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å DJVU —Å—Ç—Ä–∞–Ω–∏—Ü—É"
                self.isLoading = false
            }
            return
        }
        
        guard let image = createUIImage(
            from: pixelData,
            width: Int(scaledWidth),
            height: Int(scaledHeight)
        ) else {
            DispatchQueue.main.async {
                self.errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                self.isLoading = false
            }
            return
        }
        
        imageCache[pageIndex] = image
        
        DispatchQueue.main.async {
            if self.currentPage == pageIndex {
                self.currentImage = image
                self.isLoading = false
                self.errorMessage = ""
                print("‚úÖ DJVU —Å—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å djvulibre")
            }
        }
    }
    
    private func createUIImage(from pixelData: UnsafeMutablePointer<UInt8>, 
                              width: Int, 
                              height: Int) -> UIImage? {
        let bytesPerPixel = 4
        let bytesPerRow = width * bytesPerPixel
        let colorSpace = CGColorSpaceCreateDeviceRGB()
        
        guard let context = CGContext(
            data: pixelData,
            width: width,
            height: height,
            bitsPerComponent: 8,
            bytesPerRow: bytesPerRow,
            space: colorSpace,
            bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue
        ) else {
            return nil
        }
        
        guard let cgImage = context.makeImage() else {
            return nil
        }
        
        return UIImage(cgImage: cgImage)
    }
    
    // MARK: - Navigation
    func nextPage() {
        if currentPage < totalPages - 1 {
            loadPage(currentPage + 1)
        }
    }
    
    func previousPage() {
        if currentPage > 0 {
            loadPage(currentPage - 1)
        }
    }
    
    func goToPage(_ page: Int) {
        if page >= 0 && page < totalPages {
            loadPage(page)
        }
    }
    
    func loadAllPages() {
        guard totalPages > 0 else { return }
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        progressiveLoadingTask?.cancel()
        
        DispatchQueue.main.async {
            self.isContinuousLoading = true
            self.continuousLoadingProgress = 0.0
            self.continuousImages = [:]
            self.allPages = []
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        let loadingTask = DispatchWorkItem { [weak self] in
            self?.performProgressiveLoading()
        }
        
        progressiveLoadingTask = loadingTask
        progressiveQueue.async(execute: loadingTask)
    }
    
    // MARK: - View Mode Management
    func setViewMode(_ mode: ViewMode) {
        print("üì± –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å \(viewMode.rawValue) –Ω–∞ \(mode.rawValue)")
        
        DispatchQueue.main.async {
            self.viewMode = mode
            
            if mode == .continuous {
                // –û—á–∏—â–∞–µ–º –∏ –∑–∞–Ω–æ–≤–æ –∑–∞–ø–æ–ª–Ω—è–µ–º continuousImages
                self.continuousImages.removeAll()
                
                // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º continuousImages –∏–∑ –∫—ç—à–∞
                self.populateContinuousFromCache()
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
                self.objectWillChange.send()
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                self.loadAllPagesForContinuousView()
            }
        }
    }
    
    private func populateContinuousFromCache() {
        print("üìã –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∏–∑ –∫—ç—à–∞: \(imageCache.count) —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        for (pageIndex, image) in imageCache {
            continuousImages[pageIndex] = image
            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
        }
    }
    
    private func loadAllPagesForContinuousView() {
        guard totalPages > 0 else { return }
        
        // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É
        progressiveLoadingTask?.cancel()
        
        DispatchQueue.main.async {
            self.isContinuousLoading = true
            self.continuousLoadingProgress = 0.0
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        let pagesToLoad = Array(0..<totalPages).filter { !continuousImages.keys.contains($0) }
        
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É \(pagesToLoad.count) —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        
        let loadingTask = DispatchWorkItem { [weak self] in
            self?.performBatchLoading(pages: pagesToLoad)
        }
        
        progressiveLoadingTask = loadingTask
        progressiveQueue.async(execute: loadingTask)
    }
    
    private func performBatchLoading(pages: [Int]) {
        guard !pages.isEmpty else {
            DispatchQueue.main.async {
                self.isContinuousLoading = false
                self.continuousLoadingProgress = 1.0
            }
            return
        }
        
        let totalBatches = (pages.count + batchSize - 1) / batchSize
        
        for batchIndex in 0..<totalBatches {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            guard let task = progressiveLoadingTask, !task.isCancelled else {
                print("‚ùå –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            }
            
            let startIndex = batchIndex * batchSize
            let endIndex = min(startIndex + batchSize, pages.count)
            let batchPages = Array(pages[startIndex..<endIndex])
            
            print("üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞—Ç—á \(batchIndex + 1)/\(totalBatches): —Å—Ç—Ä–∞–Ω–∏—Ü—ã \(batchPages.map { $0 + 1 })")
            
            let group = DispatchGroup()
            
            for pageIndex in batchPages {
                group.enter()
                
                DispatchQueue.main.async {
                    self.continuousLoadingQueue.insert(pageIndex)
                }
                
                backgroundQueue.async {
                    if let image = self.loadPageImageSync(pageIndex: pageIndex) {
                        DispatchQueue.main.async {
                            self.continuousImages[pageIndex] = image
                            self.continuousLoadingQueue.remove(pageIndex)
                            
                            let loadedCount = self.continuousImages.count
                            let progress = Float(loadedCount) / Float(self.totalPages)
                            self.continuousLoadingProgress = progress
                            
                            print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (\(loadedCount)/\(self.totalPages))")
                        }
                    } else {
                        DispatchQueue.main.async {
                            self.continuousLoadingQueue.remove(pageIndex)
                        }
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É \(pageIndex + 1)")
                    }
                    group.leave()
                }
            }
            
            group.wait()
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            Thread.sleep(forTimeInterval: 0.1)
        }
        
        DispatchQueue.main.async {
            self.isContinuousLoading = false
            self.continuousLoadingProgress = 1.0
            print("üéâ –ë–∞—Ç—á–µ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        }
    }
    
    func getImageForPage(_ pageIndex: Int) -> UIImage? {
        if let image = continuousImages[pageIndex] {
            return image
        }
        
        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–æ –Ω–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        if !continuousLoadingQueue.contains(pageIndex) && viewMode == .continuous {
            DispatchQueue.main.async {
                self.continuousLoadingQueue.insert(pageIndex)
            }
            
            backgroundQueue.async {
                if let image = self.loadPageImageSync(pageIndex: pageIndex) {
                    DispatchQueue.main.async {
                        self.continuousImages[pageIndex] = image
                        self.continuousLoadingQueue.remove(pageIndex)
                        print("üîÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é")
                    }
                } else {
                    DispatchQueue.main.async {
                        self.continuousLoadingQueue.remove(pageIndex)
                    }
                }
            }
        }
        
        return nil
    }
    
    private func performProgressiveLoading() {
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è \(totalPages) —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        for pageIndex in 0..<totalPages {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –∑–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞
            guard let task = progressiveLoadingTask, !task.isCancelled else {
                print("‚ùå –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                return
            }
            
            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ
            if let cachedImage = imageCache[pageIndex] {
                // –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–∂–µ –≤ –∫—ç—à–µ
                DispatchQueue.main.async {
                    self.continuousImages[pageIndex] = cachedImage
                    self.updateProgressiveProgress(pageIndex: pageIndex)
                    print("üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫—ç—à–∞")
                }
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Ñ–æ–Ω–µ
                if let image = loadPageImageSync(pageIndex: pageIndex) {
                    DispatchQueue.main.async {
                        self.continuousImages[pageIndex] = image
                        self.updateProgressiveProgress(pageIndex: pageIndex)
                        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                    }
                } else {
                    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
                    let placeholder = createPlaceholderImage(pageIndex: pageIndex)
                    DispatchQueue.main.async {
                        self.continuousImages[pageIndex] = placeholder
                        self.updateProgressiveProgress(pageIndex: pageIndex)
                        print("‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –¥–æ–±–∞–≤–ª–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä")
                    }
                }
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ UI
            Thread.sleep(forTimeInterval: 0.05)
        }
        
        DispatchQueue.main.async {
            self.isContinuousLoading = false
            self.continuousLoadingProgress = 1.0
            print("üéâ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        }
    }
    
    private func updateProgressiveProgress(pageIndex: Int) {
        DispatchQueue.main.async {
            let progress = Float(pageIndex + 1) / Float(self.totalPages)
            self.continuousLoadingProgress = progress
            print("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: \(pageIndex + 1)/\(self.totalPages) (\(Int(progress * 100))%)")
        }
    }
    
    private func loadPageImageSync(pageIndex: Int) -> UIImage? {
        guard pageIndex >= 0 && pageIndex < totalPages else { return nil }
        
        if isPDF {
            return loadPDFPageImageSync(pageIndex: pageIndex)
        } else {
            return loadDJVUPageImageSync(pageIndex: pageIndex)
        }
    }
    
    private func loadPDFPageImageSync(pageIndex: Int) -> UIImage? {
        guard let pdfDocument = pdfDocument,
              let page = pdfDocument.page(at: pageIndex) else {
            return nil
        }
        
        let pageRect = page.bounds(for: .mediaBox)
        let scale: CGFloat = 2.0
        let scaledSize = CGSize(width: pageRect.width * scale, height: pageRect.height * scale)
        
        let renderer = UIGraphicsImageRenderer(size: scaledSize)
        let image = renderer.image { context in
            UIColor.white.set()
            context.fill(CGRect(origin: .zero, size: scaledSize))
            
            context.cgContext.scaleBy(x: scale, y: scale)
            page.draw(with: .mediaBox, to: context.cgContext)
        }
        
        imageCache[pageIndex] = image
        return image
    }
    
    private func loadDJVUPageImageSync(pageIndex: Int) -> UIImage? {
        guard let context = djvuContext else { return nil }
        
        var width: Int32 = 0
        var height: Int32 = 0
        
        let sizeResult = djvu_get_page_dimensions(context, Int32(pageIndex), &width, &height)
        if sizeResult != 0 {
            return nil
        }
        
        let scale: Float = 2.0
        let scaledWidth = Int32(Float(width) * scale)
        let scaledHeight = Int32(Float(height) * scale)
        
        let bytesPerPixel = 4
        let dataSize = Int(scaledWidth * scaledHeight * Int32(bytesPerPixel))
        let pixelData = UnsafeMutablePointer<UInt8>.allocate(capacity: dataSize)
        
        defer {
            pixelData.deallocate()
        }
        
        let renderResult = djvu_render_page_to_buffer(
            context,
            Int32(pageIndex),
            scaledWidth,
            scaledHeight,
            pixelData
        )
        
        if renderResult == -2 {
            // PDF file - should be handled by PDFKit
            return nil
        } else if renderResult != 0 {
            return nil
        }
        
        guard let image = createUIImage(
            from: pixelData,
            width: Int(scaledWidth),
            height: Int(scaledHeight)
        ) else {
            return nil
        }
        
        imageCache[pageIndex] = image
        return image
    }
    
    private func createPlaceholderImage(pageIndex: Int) -> UIImage {
        let size = CGSize(width: 400, height: 600)
        let renderer = UIGraphicsImageRenderer(size: size)
        
        return renderer.image { context in
            // –ë–µ–ª—ã–π —Ñ–æ–Ω
            UIColor.white.set()
            context.fill(CGRect(origin: .zero, size: size))
            
            UIColor.lightGray.set()
            context.stroke(CGRect(origin: .zero, size: size))
            
            let text = "–°—Ç—Ä–∞–Ω–∏—Ü–∞ \(pageIndex + 1)\n–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
            let attributes: [NSAttributedString.Key: Any] = [
                .font: UIFont.systemFont(ofSize: 24),
                .foregroundColor: UIColor.gray
            ]
            
            let textSize = text.size(withAttributes: attributes)
            let textRect = CGRect(
                x: (size.width - textSize.width) / 2,
                y: (size.height - textSize.height) / 2,
                width: textSize.width,
                height: textSize.height
            )
            
            text.draw(in: textRect, withAttributes: attributes)
        }
    }
    
    
    deinit {
        progressiveLoadingTask?.cancel()
        
        if let context = djvuContext {
            djvu_context_cleanup(context)
        }
        
        if let tempURL = tempFileURL {
            try? FileManager.default.removeItem(at: tempURL)
        }
    }
}
